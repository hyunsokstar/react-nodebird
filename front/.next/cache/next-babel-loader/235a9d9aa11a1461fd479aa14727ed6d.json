{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { all, call, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga logIn'); // const result = yield call(logInAPI);\n\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: _objectSpread({}, action.data)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logOutAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logOut(action) {\n  try {\n    console.log('saga logout'); // const result = yield call(logInAPI);\n\n    yield delay(2000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  console.log(\"saga watch 실행 check\");\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchLogIn() {\n  console.log(\"saga watch 실행 check\");\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["C:/prepare/front/sagas/user.js"],"names":["all","call","delay","fork","put","takeLatest","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","logInAPI","data","axios","post","logIn","action","console","log","type","err","error","response","logOutAPI","logOut","watchLogOut","watchLogIn","watchFollow","follow","watchUnfollow","unfollow","userSaga"],"mappings":";;;;;;AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,EAIIC,eAJJ,EAKIC,eALJ,EAMIC,eANJ,EAOIC,cAPJ,EAQIC,cARJ,EASIC,cATJ,EAUIC,gBAVJ,EAWIC,gBAXJ,EAYIC,gBAZJ,QAaO,kBAbP;;AAgBA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADA,CAEA;;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AAEA,UAAME,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEnB,cADA;AAENY,MAAAA,IAAI,oBAAOI,MAAM,CAACJ,IAAd;AAFE,KAAD,CAAT;AAIH,GATD,CASE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAElB,cADA;AAENoB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAGD,SAASW,SAAT,CAAmBX,IAAnB,EAAyB;AACrB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,UAAUY,MAAV,CAAiBR,MAAjB,EAAyB;AACrB,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADA,CAEA;;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AAEA,UAAME,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEhB;AADA,KAAD,CAAT;AAGH,GARD,CAQE,OAAOiB,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMvB,GAAG,CAAC;AACNsB,MAAAA,IAAI,EAAEf,eADA;AAENiB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUa,WAAV,GAAwB;AACpBR,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,QAAMpB,UAAU,CAACI,eAAD,EAAkBsB,MAAlB,CAAhB;AACH;;AAED,UAAUE,UAAV,GAAuB;AACnBT,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,QAAMpB,UAAU,CAACC,cAAD,EAAiBgB,KAAjB,CAAhB;AACH;;AAED,UAAUY,WAAV,GAAwB;AACpB,QAAM7B,UAAU,CAACQ,cAAD,EAAiBsB,MAAjB,CAAhB;AACH;;AAED,UAAUC,aAAV,GAA0B;AACtB,QAAM/B,UAAU,CAACW,gBAAD,EAAmBqB,QAAnB,CAAhB;AACH;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMtC,GAAG,CAAC,CACNG,IAAI,CAAC8B,UAAD,CADE,EAEN9B,IAAI,CAAC6B,WAAD,CAFE,EAGN7B,IAAI,CAAC+B,WAAD,CAHE,EAIN/B,IAAI,CAACiC,aAAD,CAJE,CAAD,CAAT;AAOH","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_SUCCESS,\r\n    LOG_IN_FAILURE,\r\n    LOG_OUT_REQUEST,\r\n    LOG_OUT_SUCCESS,\r\n    LOG_OUT_FAILURE,\r\n    FOLLOW_FAILURE,\r\n    FOLLOW_REQUEST,\r\n    FOLLOW_SUCCESS,\r\n    UNFOLLOW_FAILURE,\r\n    UNFOLLOW_REQUEST,\r\n    UNFOLLOW_SUCCESS,\r\n} from '../reducers/user';\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        console.log('saga logIn');\r\n        // const result = yield call(logInAPI);\r\n        yield delay(1000);\r\n\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: { ...action.data },\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction logOutAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logOut(action) {\r\n    try {\r\n        console.log('saga logout');\r\n        // const result = yield call(logInAPI);\r\n        yield delay(2000);\r\n\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogOut() {\r\n    console.log(\"saga watch 실행 check\");\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    console.log(\"saga watch 실행 check\");\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}