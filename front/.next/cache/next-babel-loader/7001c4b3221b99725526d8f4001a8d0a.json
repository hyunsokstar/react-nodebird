{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  hasMorePosts: true,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  imagePaths: [],\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_FAILURE\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Commeents: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})); // initialState.mainPosts = initialState.mainPosts.concat(\n//     generateDummyPost(10)\n// )\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; ////\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n}); ////\n\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true; // draft.mainPosts = action.data.concat(draft.mainPosts);\n\n        draft.mainPosts = draft.mainPosts.concat(action.data); // draft.hasMorePosts = draft.mainPosts.length < 50;\n\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      default:\n        return state;\n    } // 스위치문 괄호 끝\n\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/react-nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostsLoading","loadPostsDone","loadPostsError","hasMorePosts","uploadImagesLoading","uploadImagesDone","uploadImagesError","imagePaths","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Commeents","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_FAILURE","dummyPost","data","Comments","dummyComment","reducer","state","action","draft","type","unshift","error","post","find","v","PostId","filter","concat","length","Likers","push","UserId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';   \r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    hasMorePosts: true,\r\n\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    imagePaths: [],\r\n\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n\r\n    LIKE_POST_REQUEST, \r\n    LIKE_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n\r\n    UNLIKE_POST_REQUEST, \r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(()=> ({\r\n    id:shortId.generate(),\r\n    User: {\r\n        id:shortId.generate(),\r\n        nickname:faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Commeents: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n// initialState.mainPosts = initialState.mainPosts.concat(\r\n//     generateDummyPost(10)\r\n// )\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n////\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\n////\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(action.data)\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;                \r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;      \r\n                \r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                // draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.mainPosts = draft.mainPosts.concat(action.data);\r\n                // draft.hasMorePosts = draft.mainPosts.length < 50;\r\n                draft.hasMorePosts = action.data.length === 10;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n            case UPLOAD_IMAGES_REQUEST:\r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                draft.imagePaths = action.data;\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE:\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;\r\n\r\n            case LIKE_POST_REQUEST:\r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers.push({ id: action.data.UserId });\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;\r\n                break;\r\n            }\r\n            case LIKE_POST_FAILURE:\r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.error;\r\n                break;\r\n            case UNLIKE_POST_REQUEST:\r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;\r\n            case UNLIKE_POST_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;\r\n                break;\r\n            }\r\n            case UNLIKE_POST_FAILURE:\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.error;\r\n                break;\r\n\r\n            default:\r\n                return state;\r\n        } // 스위치문 괄호 끝\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}