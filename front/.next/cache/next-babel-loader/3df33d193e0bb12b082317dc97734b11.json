{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\react-nodebird\\\\front\\\\components\\\\PostCard.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from \"react\";\nimport { RetweetOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport CommentForm from './CommentForm';\nimport { Card, Avatar, List, Comment, Popover, Button } from 'antd';\nimport PostImages from \"./PostImages\";\nimport PostCardContent from \"../components/PostCardContent\";\nimport { REMOVE_POST_REQUEST } from '../reducers/post'; // useDispatch\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport FollowButton from \"./FollowButton\";\nvar Meta = Card.Meta;\n\nvar PostCard = function PostCard(_ref) {\n  _s();\n\n  var post = _ref.post;\n  //\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(false),\n      liked = _useState2[0],\n      setLiked = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var id = me && me.id; // const onToggleLike = useCallback(() => {\n  //     setLiked((prev) => !prev);\n  // }, []);\n\n  var onLike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onUnlike = useCallback(function () {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onRemovePost = useCallback(function () {\n    //\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(Card, {\n    style: {\n      width: \"100%\"\n    },\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 42\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }), liked // ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\n    // : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,\n    ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnlike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 27\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 27\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 45\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 45\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 39\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }\n    }))],\n    extra: __jsx(FollowButton, {\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 24\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, __jsx(Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 34\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 29\n        }\n      }, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Avatar, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 45\n          }\n        }, item.User.nickname[0]),\n        content: item.content,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 33\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  })));\n};\n\n_s(PostCard, \"p35eU3eoGTS55bz2nzRtYOJQJic=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostCard;\nexport default PostCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCard\");","map":{"version":3,"sources":["C:/react-nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","RetweetOutlined","HeartOutlined","HeartTwoTone","MessageOutlined","EllipsisOutlined","CommentForm","Card","Avatar","List","Comment","Popover","Button","PostImages","PostCardContent","REMOVE_POST_REQUEST","useSelector","useDispatch","FollowButton","Meta","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","liked","setLiked","state","removePostLoading","user","me","id","onLike","alert","type","LIKE_POST_REQUEST","data","onUnlike","UNLIKE_POST_REQUEST","onToggleComment","prev","onRemovePost","width","Images","User","nickname","content","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport { RetweetOutlined, HeartOutlined, HeartTwoTone, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport CommentForm from './CommentForm';\r\nimport { Card, Avatar, List, Comment, Popover, Button } from 'antd';\r\nimport PostImages from \"./PostImages\";\r\nimport PostCardContent from \"../components/PostCardContent\";\r\nimport { REMOVE_POST_REQUEST } from '../reducers/post';\r\n\r\n// useDispatch\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport FollowButton from \"./FollowButton\";\r\n\r\nconst { Meta } = Card;\r\n\r\nconst PostCard = ({ post }) => {\r\n    //\r\n    const dispatch = useDispatch();\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [liked, setLiked] = useState(false);\r\n    const { removePostLoading } = useSelector((state) => state.post);\r\n\r\n    const { me } = useSelector((state) => state.user);\r\n    const id = me && me.id;\r\n\r\n    // const onToggleLike = useCallback(() => {\r\n    //     setLiked((prev) => !prev);\r\n    // }, []);\r\n    const onLike = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: LIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n    const onUnlike = useCallback(() => {\r\n        if (!id) {\r\n            return alert('로그인이 필요합니다.');\r\n        }\r\n        return dispatch({\r\n            type: UNLIKE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, [id]);\r\n\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened((prev) => !prev);\r\n    }, []);\r\n\r\n    const onRemovePost = useCallback(() => {\r\n        //\r\n        dispatch({\r\n            type: REMOVE_POST_REQUEST,\r\n            data: post.id,\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                style={{ width: \"100%\" }}\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n                    <RetweetOutlined key=\"retweet\" />,\r\n                    liked\r\n                        // ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\r\n                        // : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,\r\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n                        : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n                    <MessageOutlined key=\"message\" onClick={onToggleComment} />,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={(\r\n                            <Button.Group>\r\n                                {id && post.User.id === id\r\n                                    ? (\r\n                                        <>\r\n                                            <Button>수정</Button>\r\n                                            <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                                        </>\r\n                                    )\r\n                                    : <Button>신고</Button>}\r\n                            </Button.Group>\r\n                        )}\r\n                    >\r\n                        <EllipsisOutlined />\r\n                    </Popover>,\r\n                ]}\r\n                extra={<FollowButton post={post} />}\r\n            >\r\n                <Meta\r\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                    description={<PostCardContent postData={post.content} />}\r\n                />\r\n            </Card>\r\n\r\n            {commentFormOpened && (\r\n                <>\r\n                    {/* <CommentForm /> */}\r\n                    <CommentForm post={post} />\r\n\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={(item) => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default PostCard;\r\n\r\n"]},"metadata":{},"sourceType":"module"}