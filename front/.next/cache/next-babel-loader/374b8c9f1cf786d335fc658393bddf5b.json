{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from '../reducers/post'; // import { ADD_POST_TO_ME } from '../reducers/user';\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  console.log(\"포스팅 text 확인(at saga) : \", data);\n  return axios.post('post/', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data); // yield delay(1000);\n\n    const id = shortId.generate(); // console.log(\"saga action.data : \",  action.data);\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data.text\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  console.log(\"addComent action : \", action.data);\n\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    console.log(\"saga comment action.data : \", action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/react-nodebird/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","call","axios","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","console","log","post","addPost","action","result","id","generate","type","content","text","err","error","response","addCommentAPI","postId","addComment","removePostAPI","delete","removePost","loadPostsAPI","get","loadPosts","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call  } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport shortId from 'shortid';\r\n\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    generateDummyPost,\r\n\r\n} from '../reducers/post';\r\n\r\n// import { ADD_POST_TO_ME } from '../reducers/user';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    console.log(\"포스팅 text 확인(at saga) : \", data);\r\n    return axios.post('post/', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        // yield delay(1000);\r\n        const id = shortId.generate();\r\n        // console.log(\"saga action.data : \",  action.data);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data.text,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    console.log(\"addComent action : \", action.data);\r\n    try {\r\n        // const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"saga comment action.data : \" , action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(loadPostsAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}