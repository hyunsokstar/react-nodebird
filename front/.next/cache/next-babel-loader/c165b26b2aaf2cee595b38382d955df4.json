{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null\n};\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Commeents: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n})); // initialState.mainPosts = initialState.mainPosts.concat(\n//     generateDummyPost(10)\n// )\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; ////\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n}); ////\n\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      default:\n        return state;\n    } // 스위치문 괄호 끝\n\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostsLoading","loadPostsDone","loadPostsError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Commeents","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","dummyPost","data","Comments","dummyComment","reducer","state","action","draft","type","unshift","error","post","find","v","postId","filter","concat","hasMorePosts","length"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';   \r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(()=> ({\r\n    id:shortId.generate(),\r\n    User: {\r\n        id:shortId.generate(),\r\n        nickname:faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Commeents: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n// initialState.mainPosts = initialState.mainPosts.concat(\r\n//     generateDummyPost(10)\r\n// )\r\n\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n////\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\n////\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n                \r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;                \r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;      \r\n                \r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePosts = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n\r\n            default:\r\n                return state;\r\n        } // 스위치문 괄호 끝\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}