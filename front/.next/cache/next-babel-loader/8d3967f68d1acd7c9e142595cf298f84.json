{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫번째 게시글 #해시테그 #익스프레스\",\n    Images: [{\n      src: \"https://cdn.pixabay.com/photo/2020/05/12/17/04/wind-turbine-5163993__340.jpg\"\n    }, {\n      src: \"https://cdn.pixabay.com/photo/2020/05/04/09/58/moon-5128523__340.jpg\"\n    }, {\n      src: \"https://cdn.pixabay.com/photo/2020/06/09/15/16/brugge-5278796__340.jpg\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와\"\n    }, {\n      User: {\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고 싶어요\"\n    }]\n  } // 더미 게시글 정보 끝\n  ],\n  //mainPosts 배열 끝\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n}; // export const ADD_POST = 'ADD_POST';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; ////\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n}); ////\n\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    ////\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      // 사가에서 넘어온 postId를 이용해 원래 게시글 정보 찾기\n      const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n      const post = _objectSpread({}, state.mainPosts[postIndex]); // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\n\n\n      const Comments = [dummyComment(action.data.content), ...post.Comments]; // 원래 게시글 정보의 게시글과 댓글 정보를 재구성 \n\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = _objectSpread(_objectSpread({}, post), {}, {\n        Comments\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts,\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        // filter 의 각각의 요소가 v로 전달 되며 \n        // v.id !== action.data(=post.id) 인것들로 다시 재구성 \n        mainPosts: state.mainPosts.filter(v => {\n          console.log(\"삭제할 id : \", action.data);\n          return v.id !== action.data;\n        }),\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","dummyPost","data","dummyComment","generate","reducer","state","action","type","error","postIndex","findIndex","v","postId","post","filter","console","log"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: \"제로초\",\r\n            },\r\n            content: \"첫번째 게시글 #해시테그 #익스프레스\",\r\n            Images: [\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/05/12/17/04/wind-turbine-5163993__340.jpg\",\r\n                },\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/05/04/09/58/moon-5128523__340.jpg\",\r\n                },\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/06/09/15/16/brugge-5278796__340.jpg\",\r\n                },\r\n            ],\r\n            Comments: [\r\n                {\r\n                    User: {\r\n                        nickname: \"nero\",\r\n                    },\r\n                    content: \"우와\",\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: \"hero\",\r\n                    },\r\n                    content: \"얼른 사고 싶어요\",\r\n                },\r\n            ],\r\n        }, // 더미 게시글 정보 끝\r\n    ], //mainPosts 배열 끝\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\n// export const ADD_POST = 'ADD_POST';\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n////\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\n////\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        ////\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            };\r\n\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            };\r\n        case ADD_COMMENT_SUCCESS:\r\n            // 사가에서 넘어온 postId를 이용해 원래 게시글 정보 찾기\r\n            const postIndex = state.mainPosts.findIndex(\r\n                (v) => v.id === action.data.postId\r\n            );\r\n            const post = { ...state.mainPosts[postIndex] };\r\n\r\n            // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\r\n            const Comments = [\r\n                dummyComment(action.data.content),\r\n                ...post.Comments,\r\n            ];\r\n\r\n            // 원래 게시글 정보의 게시글과 댓글 정보를 재구성 \r\n            const mainPosts = [...state.mainPosts]\r\n            mainPosts[postIndex] = { ...post, Comments };\r\n\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n                addCommentLoading: false,\r\n                addCommentDone: true,\r\n            };\r\n\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            };\r\n\r\n        case REMOVE_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                removePostLoading: true,\r\n                removePostDone: false,\r\n                removePostError: null,\r\n            };\r\n        case REMOVE_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                // filter 의 각각의 요소가 v로 전달 되며 \r\n                // v.id !== action.data(=post.id) 인것들로 다시 재구성 \r\n                mainPosts: state.mainPosts.filter((v) => {\r\n                    console.log(\"삭제할 id : \", action.data);\r\n                    return v.id !== action.data\r\n                }),\r\n                removePostLoading: false,\r\n                removePostDone: true,\r\n            };\r\n        case REMOVE_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                removePostLoading: false,\r\n                removePostError: action.error,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}