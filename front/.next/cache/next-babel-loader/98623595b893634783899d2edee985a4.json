{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga logIn');\n    const result = yield call(logInAPI);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn)]);\n}","map":{"version":3,"sources":["C:/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","logInAPI","data","axios","post","logIn","action","console","log","result","call","type","LOG_IN_SUCCESS","err","error","LOG_IN_FAILURE","response","watchLogIn","LOG_IN_REQUEST","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACH;;AAED,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAMC,MAAM,GAAG,MAAMC,IAAI,CAACT,QAAD,CAAzB;AACA,UAAMF,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEC,cADA;AAENV,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOW,GAAP,EAAY;AACVN,IAAAA,OAAO,CAACO,KAAR,CAAcD,GAAd;AACA,UAAMd,GAAG,CAAC;AACNY,MAAAA,IAAI,EAAEI,cADA;AAEND,MAAAA,KAAK,EAAED,GAAG,CAACG,QAAJ,CAAad;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUe,UAAV,GAAuB;AACnB,QAAMjB,UAAU,CAACkB,cAAD,EAAiBb,KAAjB,CAAhB;AACH;;AAED,eAAe,UAAUc,QAAV,GAAqB;AAChC,QAAMvB,GAAG,CAAC,CACNE,IAAI,CAACmB,UAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        console.log('saga logIn');\r\n        const result = yield call(logInAPI);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogIn),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}