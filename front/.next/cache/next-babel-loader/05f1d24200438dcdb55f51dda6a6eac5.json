{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post'; // import { ADD_POST_TO_ME } from '../reducers/user';\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  console.log(\"포스팅 data 확인(at saga) : \", data);\n  return axios.post('post/', data);\n}\n\nfunction addPost(action) {\n  var result, id;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(\"posting result from backend : \", result.data);\n          id = shortId.generate();\n          _context.next = 8;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              // content: action.data.text,\n              content: result.data.content\n            }\n          });\n\n        case 8:\n          _context.next = 10;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 10:\n          _context.next = 17;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 17;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          // yield delay(1000);\n          console.log(\" : \", action.data);\n          _context2.next = 4;\n          return call(addCommentAPI, action.data);\n\n        case 4:\n          result = _context2.sent;\n          console.log(\"response for addCommenetAPI : \", result.data);\n          _context2.next = 8;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context2.next = 15;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(\"댓글 에러 : \", _context2.t0);\n          _context2.next = 15;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"]('/api/post', data);\n}\n\nfunction removePost(action) {\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction loadPosts(action) {\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10)\n          });\n\n        case 5:\n          _context4.next = 12;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          console.log(\"result.data(response for image upload) : \", result.data);\n          _context5.next = 7;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context5.next = 14;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 14;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages)]);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}","map":{"version":3,"sources":["C:/react-nodebird/front/sagas/post.js"],"names":["addPost","addComment","removePost","loadPosts","uploadImages","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","watchUploadImages","postSaga","all","delay","fork","put","takeLatest","throttle","call","axios","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","console","log","post","action","result","id","generate","type","content","error","response","addCommentAPI","postId","removePostAPI","loadPostsAPI","get","uploadImagesAPI"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call  } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\n\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    generateDummyPost,\r\n    \r\n    UPLOAD_IMAGES_REQUEST, \r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n} from '../reducers/post';  \r\n\r\n// import { ADD_POST_TO_ME } from '../reducers/user';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    console.log(\"포스팅 data 확인(at saga) : \", data);\r\n    return axios.post('post/', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"posting result from backend : \", result.data);\r\n\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                // content: action.data.text,\r\n                content: result.data.content,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        console.log(\" : \" , action.data);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"response for addCommenetAPI : \", result.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(loadPostsAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        console.log(\"result.data(response for image upload) : \" , result.data);\r\n\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}