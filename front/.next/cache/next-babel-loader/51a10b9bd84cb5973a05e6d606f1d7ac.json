{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  hasMorePosts: true,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  imagePaths: []\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Commeents: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n}; // initialState.mainPosts = initialState.mainPosts.concat(\n//     generateDummyPost(10)\n// )\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE'; ////\n\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n}; ////\n\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      default:\n        return state;\n    } // 스위치문 괄호 끝\n\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/react-nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","loadPostsLoading","loadPostsDone","loadPostsError","hasMorePosts","uploadImagesLoading","uploadImagesDone","uploadImagesError","imagePaths","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Commeents","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","dummyPost","data","Comments","dummyComment","reducer","state","action","draft","type","unshift","error","post","find","v","postId","filter","concat","length"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';   \r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n\r\n    hasMorePosts: true,\r\n\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    imagePaths: [],\r\n\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(()=> ({\r\n    id:shortId.generate(),\r\n    User: {\r\n        id:shortId.generate(),\r\n        nickname:faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Commeents: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\n// initialState.mainPosts = initialState.mainPosts.concat(\r\n//     generateDummyPost(10)\r\n// )\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n////\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\n////\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n                \r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;                \r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;      \r\n                \r\n            case LOAD_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                draft.mainPosts = action.data.concat(draft.mainPosts);\r\n                draft.hasMorePosts = draft.mainPosts.length < 50;\r\n                break;\r\n            case LOAD_POSTS_FAILURE:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.error;\r\n                break;\r\n            case UPLOAD_IMAGES_REQUEST:\r\n                draft.uploadImagesLoading = true;\r\n                draft.uploadImagesDone = false;\r\n                draft.uploadImagesError = null;\r\n                break;\r\n            case UPLOAD_IMAGES_SUCCESS: {\r\n                draft.imagePaths = action.data;\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesDone = true;\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGES_FAILURE:\r\n                draft.uploadImagesLoading = false;\r\n                draft.uploadImagesError = action.error;\r\n                break;\r\n            default:\r\n                return state;\r\n        } // 스위치문 괄호 끝\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}