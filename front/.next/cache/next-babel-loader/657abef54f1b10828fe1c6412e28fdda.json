{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Commeents: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE'; ////\n\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n}; ////\n\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        return state;\n    } // 스위치문 괄호 끝\n\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Commeents","sentence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","dummyPost","data","Comments","dummyComment","reducer","state","action","draft","type","unshift","error","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';   \r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(()=> ({\r\n    id:shortId.generate(),\r\n    User: {\r\n        id:shortId.generate(),\r\n        nickname:faker.name.findName(),\r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Commeents: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.sentence(),\r\n    }],\r\n}));\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n    generateDummyPost(10)\r\n)\r\n\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n////\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\n////\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n                \r\n            case ADD_POST_SUCCESS:\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;                \r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;                \r\n            default:\r\n                return state;\r\n        } // 스위치문 괄호 끝\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}