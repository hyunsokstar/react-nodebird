{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n}; // export const ADD_POST = 'ADD_POST';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; // export const addPost = {\n//     type: ADD_POST,\n// };\n\nconst dummyPost = data => {\n  console.log(\"data : \", data);\n  return {\n    id: 4,\n    content: data.text,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          postAdded: true\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","dummyPost","data","console","log","id","content","text","User","nickname","Images","Comments","reducer","state","action","type","ADD_POST","postAdded"],"mappings":";;;;;;AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,EADa;AAExBC,EAAAA,cAAc,EAAE,KAFQ;AAGxBC,EAAAA,WAAW,EAAE,KAHW;AAIxBC,EAAAA,YAAY,EAAE;AAJU,CAArB,C,CAOP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB,C,CAEP;AACA;AACA;;AAEA,MAAMC,SAAS,GAAIC,IAAD,IAAU;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,IAAvB;AACA,SACI;AACIG,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,OAAO,EAAEJ,IAAI,CAACK,IAFlB;AAGIC,IAAAA,IAAI,EAAE;AACFH,MAAAA,EAAE,EAAE,CADF;AAEFI,MAAAA,QAAQ,EAAE;AAFR,KAHV;AAOIC,IAAAA,MAAM,EAAE,EAPZ;AAQIC,IAAAA,QAAQ,EAAE;AARd,GADJ;AAYH,CAdD;;AAgBA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGpB,YAAT,EAAuBqB,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKC,QAAL;AAAe;AACX,+CACOH,KADP;AAEInB,UAAAA,SAAS,EAAE,CAACO,SAAS,CAACa,MAAM,CAACZ,IAAR,CAAV,EAAyB,GAAGW,KAAK,CAACnB,SAAlC,CAFf;AAGIuB,UAAAA,SAAS,EAAE;AAHf;AAKH;;AAED;AACI,aAAOJ,KAAP;AAXR;AAaH,CAdD;;AAgBA,eAAeD,OAAf","sourcesContent":["\r\nexport const initialState = {\r\n    mainPosts: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n};\r\n\r\n// export const ADD_POST = 'ADD_POST';\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n// export const addPost = {\r\n//     type: ADD_POST,\r\n// };\r\n\r\nconst dummyPost = (data) => {\r\n    console.log(\"data : \", data);\r\n    return (\r\n        {\r\n            id: 4,\r\n            content: data.text,\r\n            User: {\r\n                id: 1,\r\n                nickname: '제로초',\r\n            },\r\n            Images: [],\r\n            Comments: [],\r\n        }\r\n    )\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case ADD_POST: {\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                postAdded: true,\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}