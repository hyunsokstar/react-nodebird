{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  console.log(\"포스팅 data 확인(at saga) : \", data);\n  return axios.post('post/', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"posting result from backend : \", result.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    console.log(\" : \", action.data);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"response for addCommenetAPI : \", result.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n} // function removePostAPI(data) {\n//     return axios.delete('/api/post', data);\n// }\n// data가 post.id\n\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data); // yield delay(1000);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      // data: action.data,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    console.log(\"result for loadPostsAPI : \", result.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    console.log(\"result.data(response for image upload) : \", result.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log(\"result for like from backend : \", result.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n} ///////////////////////////////////////////////\n\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n}","map":{"version":3,"sources":["C:/react-nodebird/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","call","axios","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","console","log","post","addPost","action","result","id","generate","type","err","error","response","addCommentAPI","postId","addComment","removePostAPI","delete","removePost","loadPostsAPI","lastId","get","loadPosts","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","unlikePost","retweetAPI","retweet","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","watchUploadImages","watchLikePost","watchUnlikePost","watchRetweet","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\n\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    generateDummyPost,\r\n\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n\r\n} from '../reducers/post';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    console.log(\"포스팅 data 확인(at saga) : \", data);\r\n    return axios.post('post/', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"posting result from backend : \", result.data);\r\n\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        console.log(\" : \", action.data);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"response for addCommenetAPI : \", result.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n// function removePostAPI(data) {\r\n//     return axios.delete('/api/post', data);\r\n// }\r\n\r\n// data가 post.id\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        // yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            // data: action.data,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log(\"result for loadPostsAPI : \", result.data);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        console.log(\"result.data(response for image upload) : \", result.data);\r\n\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n\r\n        console.log(\"result for like from backend : \", result.data);\r\n\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n///////////////////////////////////////////////\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}