{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫번째 게시글 #해시테그 #익스프레스\",\n    Images: [{\n      src: \"https://cdn.pixabay.com/photo/2020/05/12/17/04/wind-turbine-5163993__340.jpg\"\n    }, {\n      src: \"https://cdn.pixabay.com/photo/2020/05/04/09/58/moon-5128523__340.jpg\"\n    }, {\n      src: \"https://cdn.pixabay.com/photo/2020/06/09/15/16/brugge-5278796__340.jpg\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와\"\n    }, {\n      User: {\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고 싶어요\"\n    }]\n  } // 더미 게시글 정보 끝\n  ],\n  //mainPosts 배열 끝\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n}; // export const ADD_POST = 'ADD_POST';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE'; ////\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n}); ////\n\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: \"제로초\"\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        // return {\n        //     ...state,\n        //     addPostLoading: true,\n        //     addPostDone: false,\n        //     addPostError: null,\n        // };\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        // return {\n        //     ...state,\n        //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        //     addPostLoading: false,\n        //     addPostDone: true,\n        // };\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        // return {\n        //     ...state,\n        //     addPostLoading: false,\n        //     addPostError: action.error,\n        // };\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        // return {\n        //     ...state,\n        //     addCommentLoading: true,\n        //     addCommentDone: false,\n        //     addCommentError: null,\n        // };\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        // // 사가에서 넘어온 postId를 이용해 원래 게시글 정보 찾기\n        // const postIndex = state.mainPosts.findIndex(\n        //     (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        // // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\n        // const Comments = [\n        //     dummyComment(action.data.content),\n        //     ...post.Comments,\n        // ];\n        // // 원래 게시글 정보의 게시글과 댓글 정보를 재구성 \n        // const mainPosts = [...state.mainPosts]\n        // mainPosts[postIndex] = { ...post, Comments };\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentLoading: false,\n        //     addCommentDone: true,\n        // };\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        // return {\n        //     ...state,\n        //     addCommentLoading: false,\n        //     addCommentError: action.error,\n        // };\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null\n        });\n\n      case REMOVE_POST_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          // filter 의 각각의 요소가 v로 전달 되며 \n          // v.id !== action.data(=post.id) 인것들로 다시 재구성 \n          mainPosts: state.mainPosts.filter(v => {\n            console.log(\"삭제할 id : \", action.data);\n            return v.id !== action.data;\n          }),\n          removePostLoading: false,\n          removePostDone: true\n        });\n\n      case REMOVE_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: false,\n          removePostError: action.error\n        });\n\n      default:\n        return state;\n    } // 스위치문 괄호 끝\n\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","dummyPost","data","dummyComment","generate","reducer","state","action","draft","type","unshift","error","post","find","v","postId","filter","console","log"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';   \r\n\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: \"제로초\",\r\n            },\r\n            content: \"첫번째 게시글 #해시테그 #익스프레스\",\r\n            Images: [\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/05/12/17/04/wind-turbine-5163993__340.jpg\",\r\n                },\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/05/04/09/58/moon-5128523__340.jpg\",\r\n                },\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/06/09/15/16/brugge-5278796__340.jpg\",\r\n                },\r\n            ],\r\n            Comments: [\r\n                {\r\n                    User: {\r\n                        nickname: \"nero\",\r\n                    },\r\n                    content: \"우와\",\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: \"hero\",\r\n                    },\r\n                    content: \"얼른 사고 싶어요\",\r\n                },\r\n            ],\r\n        }, // 더미 게시글 정보 끝\r\n    ], //mainPosts 배열 끝\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\n// export const ADD_POST = 'ADD_POST';\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n////\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\n////\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: true,\r\n                //     addPostDone: false,\r\n                //     addPostError: null,\r\n                // };\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n                \r\n            case ADD_POST_SUCCESS:\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                //     addPostLoading: false,\r\n                //     addPostDone: true,\r\n                // };\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: false,\r\n                //     addPostError: action.error,\r\n                // };\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: false,\r\n                //     addCommentError: null,\r\n                // };\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                // // 사가에서 넘어온 postId를 이용해 원래 게시글 정보 찾기\r\n                // const postIndex = state.mainPosts.findIndex(\r\n                //     (v) => v.id === action.data.postId\r\n                // );\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\r\n                // const Comments = [\r\n                //     dummyComment(action.data.content),\r\n                //     ...post.Comments,\r\n                // ];\r\n                // // 원래 게시글 정보의 게시글과 댓글 정보를 재구성 \r\n                // const mainPosts = [...state.mainPosts]\r\n                // mainPosts[postIndex] = { ...post, Comments };\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true,\r\n                // };\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;                \r\n            case ADD_COMMENT_FAILURE:\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: false,\r\n                //     addCommentError: action.error,\r\n                // };\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;    \r\n            case REMOVE_POST_REQUEST:\r\n                return {\r\n                    ...state,\r\n                    removePostLoading: true,\r\n                    removePostDone: false,\r\n                    removePostError: null,\r\n                };\r\n            case REMOVE_POST_SUCCESS:\r\n                return {\r\n                    ...state,\r\n                    // filter 의 각각의 요소가 v로 전달 되며 \r\n                    // v.id !== action.data(=post.id) 인것들로 다시 재구성 \r\n                    mainPosts: state.mainPosts.filter((v) => {\r\n                        console.log(\"삭제할 id : \", action.data);\r\n                        return v.id !== action.data\r\n                    }),\r\n                    removePostLoading: false,\r\n                    removePostDone: true,\r\n                };\r\n            case REMOVE_POST_FAILURE:\r\n                return {\r\n                    ...state,\r\n                    removePostLoading: false,\r\n                    removePostError: action.error,\r\n                };\r\n    \r\n            default:\r\n                return state;\r\n        } // 스위치문 괄호 끝\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}