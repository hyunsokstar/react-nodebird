{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    },\n    content: \"첫번째 게시글 #해시테그 #익스프레스\",\n    Images: [{\n      src: \"https://cdn.pixabay.com/photo/2020/05/12/17/04/wind-turbine-5163993__340.jpg\"\n    }, {\n      src: \"https://cdn.pixabay.com/photo/2020/05/04/09/58/moon-5128523__340.jpg\"\n    }, {\n      src: \"https://cdn.pixabay.com/photo/2020/06/09/15/16/brugge-5278796__340.jpg\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"우와\"\n    }, {\n      User: {\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고 싶어요\"\n    }]\n  } // 더미 게시글 정보 끝\n  ],\n  //mainPosts 배열 끝\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n}; // export const ADD_POST = 'ADD_POST';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; // const dummyPost = (data) => {\n//     console.log(\"data : \", data);\n//     return (\n//         {\n//             id: 4,\n//             content: data.text,\n//             User: {\n//                 id: 1,\n//                 nickname: '제로초',\n//             },\n//             Images: [],\n//             Comments: [],\n//         }\n//     )\n// }\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '제로초'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // case ADD_POST: {\n    //     return {\n    //         ...state,\n    //         mainPosts: [dummyPost(action.data), ...state.mainPosts],\n    //         postAdded: true,\n    //     };\n    // }\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","addPostLoading","addPostDone","addPostError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","dummyPost","data","reducer","state","action","type","error"],"mappings":";;;;;;AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CACP;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAFV;AAMIC,IAAAA,OAAO,EAAE,sBANb;AAOIC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,GAAG,EACC;AAFR,KADI,EAKJ;AACIA,MAAAA,GAAG,EACC;AAFR,KALI,EASJ;AACIA,MAAAA,GAAG,EACC;AAFR,KATI,CAPZ;AAqBIC,IAAAA,QAAQ,EAAE,CACN;AACIL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KADM,EAON;AACIF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KAPM;AArBd,GADO,CAoCJ;AApCI,GADa;AAsCrB;AACHI,EAAAA,cAAc,EAAE,KAvCQ;AAwCxBC,EAAAA,WAAW,EAAE,KAxCW;AAyCxBC,EAAAA,YAAY,EAAE;AAzCU,CAArB,C,CA4CP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAIC,IAAD,KAAW;AACzBjB,EAAAA,EAAE,EAAEiB,IAAI,CAACjB,EADgB;AAEzBG,EAAAA,OAAO,EAAEc,IAAI,CAACd,OAFW;AAGzBF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHmB;AAOzBE,EAAAA,MAAM,EAAE,EAPiB;AAQzBE,EAAAA,QAAQ,EAAE;AARe,CAAX,CAAlB;;AAWA,MAAMY,OAAO,GAAG,CAACC,KAAK,GAAGrB,YAAT,EAAuBsB,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAKX,gBAAL;AACI,6CACOS,KADP;AAEIZ,QAAAA,cAAc,EAAE,IAFpB;AAGIC,QAAAA,WAAW,EAAE,KAHjB;AAIIC,QAAAA,YAAY,EAAE;AAJlB;;AAMJ,SAAKE,gBAAL;AACI,6CACOQ,KADP;AAEIpB,QAAAA,SAAS,EAAE,CAACiB,SAAS,CAACI,MAAM,CAACH,IAAR,CAAV,EAAyB,GAAGE,KAAK,CAACpB,SAAlC,CAFf;AAGIQ,QAAAA,cAAc,EAAE,KAHpB;AAIIC,QAAAA,WAAW,EAAE;AAJjB;;AAMJ,SAAKI,gBAAL;AACI,6CACOO,KADP;AAEIZ,QAAAA,cAAc,EAAE,KAFpB;AAGIE,QAAAA,YAAY,EAAEW,MAAM,CAACE;AAHzB;;AAOJ;AACI,aAAOH,KAAP;AAjCR;AAmCH,CApCD;;AAsCA,eAAeD,OAAf","sourcesContent":["\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: \"제로초\",\r\n            },\r\n            content: \"첫번째 게시글 #해시테그 #익스프레스\",\r\n            Images: [\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/05/12/17/04/wind-turbine-5163993__340.jpg\",\r\n                },\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/05/04/09/58/moon-5128523__340.jpg\",\r\n                },\r\n                {\r\n                    src:\r\n                        \"https://cdn.pixabay.com/photo/2020/06/09/15/16/brugge-5278796__340.jpg\",\r\n                },\r\n            ],\r\n            Comments: [\r\n                {\r\n                    User: {\r\n                        nickname: \"nero\",\r\n                    },\r\n                    content: \"우와\",\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: \"hero\",\r\n                    },\r\n                    content: \"얼른 사고 싶어요\",\r\n                },\r\n            ],\r\n        }, // 더미 게시글 정보 끝\r\n    ], //mainPosts 배열 끝\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n};\r\n\r\n// export const ADD_POST = 'ADD_POST';\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\n\r\n// const dummyPost = (data) => {\r\n//     console.log(\"data : \", data);\r\n//     return (\r\n//         {\r\n//             id: 4,\r\n//             content: data.text,\r\n//             User: {\r\n//                 id: 1,\r\n//                 nickname: '제로초',\r\n//             },\r\n//             Images: [],\r\n//             Comments: [],\r\n//         }\r\n//     )\r\n// }\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        // case ADD_POST: {\r\n        //     return {\r\n        //         ...state,\r\n        //         mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n        //         postAdded: true,\r\n        //     };\r\n        // }\r\n\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}