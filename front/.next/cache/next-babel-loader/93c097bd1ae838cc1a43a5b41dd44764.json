{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [// {\n    //     id: 1,\n    //     User: {\n    //         id: 1,\n    //         nickname: \"제로초\",\n    //     },\n    //     content: \"첫번째 게시글 #해시테그 #익스프레스\",\n    //     Images: [\n    //         {\n    //             src:\n    //                 \"https://cdn.pixabay.com/photo/2020/05/12/17/04/wind-turbine-5163993__340.jpg\",\n    //         },\n    //         {\n    //             src:\n    //                 \"https://cdn.pixabay.com/photo/2020/05/04/09/58/moon-5128523__340.jpg\",\n    //         },\n    //         {\n    //             src:\n    //                 \"https://cdn.pixabay.com/photo/2020/06/09/15/16/brugge-5278796__340.jpg\",\n    //         },\n    //     ],\n    //     Comments: [\n    //         {\n    //             User: {\n    //                 nickname: \"nero\",\n    //             },\n    //             content: \"우와\",\n    //         },\n    //         {\n    //             User: {\n    //                 nickname: \"hero\",\n    //             },\n    //             content: \"얼른 사고 싶어요\",\n    //         },\n    //     ],\n    // }, // 더미 게시글 정보 끝\n  ],\n  //mainPosts 배열 끝\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lerem.paragraph(),\n      Images: [{\n        src: faker.image.imageIrl()\n      }],\n      Commeents: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.senetence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat();\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE'; ////\n\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    Images: [],\n    Comments: []\n  };\n}; ////\n\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"제로초\"\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        // return {\n        //     ...state,\n        //     addPostLoading: true,\n        //     addPostDone: false,\n        //     addPostError: null,\n        // };\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        // return {\n        //     ...state,\n        //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        //     addPostLoading: false,\n        //     addPostDone: true,\n        // };\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        // return {\n        //     ...state,\n        //     addPostLoading: false,\n        //     addPostError: action.error,\n        // };\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        // return {\n        //     ...state,\n        //     addCommentLoading: true,\n        //     addCommentDone: false,\n        //     addCommentError: null,\n        // };\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        // // 사가에서 넘어온 postId를 이용해 원래 게시글 정보 찾기\n        // const postIndex = state.mainPosts.findIndex(\n        //     (v) => v.id === action.data.postId\n        // );\n        // const post = { ...state.mainPosts[postIndex] };\n        // // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\n        // const Comments = [\n        //     dummyComment(action.data.content),\n        //     ...post.Comments,\n        // ];\n        // // 원래 게시글 정보의 게시글과 댓글 정보를 재구성 \n        // const mainPosts = [...state.mainPosts]\n        // mainPosts[postIndex] = { ...post, Comments };\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentLoading: false,\n        //     addCommentDone: true,\n        // };\n        // 해당 배열 객체 찾기\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        // return {\n        //     ...state,\n        //     addCommentLoading: false,\n        //     addCommentError: action.error,\n        // };\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        // return {\n        //     ...state,\n        //     removePostLoading: true,\n        //     removePostDone: false,\n        //     removePostError: null,\n        // };\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        // return {\n        //     ...state,\n        //     // filter 의 각각의 요소가 v로 전달 되며 \n        //     // v.id !== action.data(=post.id) 인것들로 다시 재구성 \n        //     mainPosts: state.mainPosts.filter((v) => {\n        //         console.log(\"삭제할 id : \", action.data);\n        //         return v.id !== action.data\n        //     }),\n        //     removePostLoading: false,\n        //     removePostDone: true,\n        // };\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        // return {\n        //     ...state,\n        //     removePostLoading: false,\n        //     removePostError: action.error,\n        // };\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      default:\n        return state;\n    } // 스위치문 괄호 끝\n\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","removePostLoading","removePostDone","removePostError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lerem","paragraph","Images","src","image","imageIrl","Commeents","lorem","senetence","concat","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","dummyPost","data","Comments","dummyComment","reducer","state","action","draft","type","unshift","error","post","find","v","postId","filter"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';   \r\n\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        // {\r\n        //     id: 1,\r\n        //     User: {\r\n        //         id: 1,\r\n        //         nickname: \"제로초\",\r\n        //     },\r\n        //     content: \"첫번째 게시글 #해시테그 #익스프레스\",\r\n        //     Images: [\r\n        //         {\r\n        //             src:\r\n        //                 \"https://cdn.pixabay.com/photo/2020/05/12/17/04/wind-turbine-5163993__340.jpg\",\r\n        //         },\r\n        //         {\r\n        //             src:\r\n        //                 \"https://cdn.pixabay.com/photo/2020/05/04/09/58/moon-5128523__340.jpg\",\r\n        //         },\r\n        //         {\r\n        //             src:\r\n        //                 \"https://cdn.pixabay.com/photo/2020/06/09/15/16/brugge-5278796__340.jpg\",\r\n        //         },\r\n        //     ],\r\n        //     Comments: [\r\n        //         {\r\n        //             User: {\r\n        //                 nickname: \"nero\",\r\n        //             },\r\n        //             content: \"우와\",\r\n        //         },\r\n        //         {\r\n        //             User: {\r\n        //                 nickname: \"hero\",\r\n        //             },\r\n        //             content: \"얼른 사고 싶어요\",\r\n        //         },\r\n        //     ],\r\n        // }, // 더미 게시글 정보 끝\r\n    ], //mainPosts 배열 끝\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(()=> ({\r\n    id:shortId.generate(),\r\n    User: {\r\n        id:shortId.generate(),\r\n        nickname:faker.name.findName(),\r\n    },\r\n    content: faker.lerem.paragraph(),\r\n    Images: [{\r\n        src: faker.image.imageIrl(),\r\n    }],\r\n    Commeents: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.senetence(),\r\n    }]\r\n\r\n}));\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n    // Array(20).fill().map(() => ({\r\n    //     id: shortId.generate(),\r\n    //     User: {\r\n    //         id: shortId.generate(),\r\n    //         nickname: faker.name.findName(),\r\n    //     },\r\n    //     content: faker.lorem.paragraph(),\r\n    //     Images: [{\r\n    //         src: faker.image.image(),\r\n    //     }],\r\n    //     Comments: [{\r\n    //         User: {\r\n    //             id: shortId.generate(),\r\n    //             nickname: faker.name.findName(),\r\n    //         },\r\n    //         content: faker.lorem.sentence(),\r\n    //     }],\r\n    // })),\r\n)\r\n\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\n////\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '제로초',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\n////\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: \"제로초\",\r\n    },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: true,\r\n                //     addPostDone: false,\r\n                //     addPostError: null,\r\n                // };\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n                \r\n            case ADD_POST_SUCCESS:\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                //     addPostLoading: false,\r\n                //     addPostDone: true,\r\n                // };\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                // return {\r\n                //     ...state,\r\n                //     addPostLoading: false,\r\n                //     addPostError: action.error,\r\n                // };\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n            case ADD_COMMENT_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: true,\r\n                //     addCommentDone: false,\r\n                //     addCommentError: null,\r\n                // };\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:\r\n                // // 사가에서 넘어온 postId를 이용해 원래 게시글 정보 찾기\r\n                // const postIndex = state.mainPosts.findIndex(\r\n                //     (v) => v.id === action.data.postId\r\n                // );\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // // 원래 댓글 정보 + 새로운 댓글 정보로 댓글 정보 재구성\r\n                // const Comments = [\r\n                //     dummyComment(action.data.content),\r\n                //     ...post.Comments,\r\n                // ];\r\n                // // 원래 게시글 정보의 게시글과 댓글 정보를 재구성 \r\n                // const mainPosts = [...state.mainPosts]\r\n                // mainPosts[postIndex] = { ...post, Comments };\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true,\r\n                // };\r\n                // 해당 배열 객체 찾기\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;                \r\n            case ADD_COMMENT_FAILURE:\r\n                // return {\r\n                //     ...state,\r\n                //     addCommentLoading: false,\r\n                //     addCommentError: action.error,\r\n                // };\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            case REMOVE_POST_REQUEST:\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: true,\r\n                //     removePostDone: false,\r\n                //     removePostError: null,\r\n                // };\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                // return {\r\n                //     ...state,\r\n                //     // filter 의 각각의 요소가 v로 전달 되며 \r\n                //     // v.id !== action.data(=post.id) 인것들로 다시 재구성 \r\n                //     mainPosts: state.mainPosts.filter((v) => {\r\n                //         console.log(\"삭제할 id : \", action.data);\r\n                //         return v.id !== action.data\r\n                //     }),\r\n                //     removePostLoading: false,\r\n                //     removePostDone: true,\r\n                // };\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                // return {\r\n                //     ...state,\r\n                //     removePostLoading: false,\r\n                //     removePostError: action.error,\r\n                // };\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;                \r\n            default:\r\n                return state;\r\n        } // 스위치문 괄호 끝\r\n    });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}