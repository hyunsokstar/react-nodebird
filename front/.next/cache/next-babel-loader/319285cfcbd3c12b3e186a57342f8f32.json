{"ast":null,"code":"import { all, delay, fork, put, takeLatest, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from '../reducers/post'; // import { ADD_POST_TO_ME } from '../reducers/user';\n\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  console.log(\"포스팅 data 확인(at saga) : \", data);\n  return axios.post('post/', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log(\"posting result from backend : \", result.data);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // yield delay(1000);\n    console.log(\" : \", action.data);\n    const result = yield call(addCommentAPI, action.data);\n    console.log(\"response for addCommenetAPI : \", result.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.log(\"댓글 에러 : \", err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    console.log(\"result.data(response for image upload) : \", result.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts), fork(watchUploadImages)]);\n}","map":{"version":3,"sources":["C:/react-nodebird/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","throttle","call","axios","shortId","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","console","log","post","addPost","action","result","id","generate","type","err","error","response","addCommentAPI","postId","addComment","removePostAPI","delete","removePost","loadPostsAPI","get","loadPosts","uploadImagesAPI","uploadImages","watchAddPost","watchAddComment","watchRemovePost","watchLoadPosts","watchUploadImages","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest, throttle, call  } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\n\r\nimport {\r\n    ADD_POST_FAILURE,\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n\r\n    LOAD_POSTS_REQUEST,\r\n    LOAD_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE,\r\n    generateDummyPost,\r\n    \r\n    UPLOAD_IMAGES_REQUEST, \r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n\r\n} from '../reducers/post';  \r\n\r\n// import { ADD_POST_TO_ME } from '../reducers/user';\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\r\n\r\n\r\nfunction addPostAPI(data) {\r\n    console.log(\"포스팅 data 확인(at saga) : \", data);\r\n    return axios.post('post/', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log(\"posting result from backend : \", result.data);\r\n\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        // yield delay(1000);\r\n        console.log(\" : \" , action.data);\r\n        const result = yield call(addCommentAPI, action.data);\r\n        console.log(\"response for addCommenetAPI : \", result.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.log(\"댓글 에러 : \", err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // const result = yield call(removePostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        // const result = yield call(loadPostsAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDummyPost(10),\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images', data);\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        console.log(\"result.data(response for image upload) : \" , result.data);\r\n\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPosts),\r\n        fork(watchUploadImages),\r\n\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}