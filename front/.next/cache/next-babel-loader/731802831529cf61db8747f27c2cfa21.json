{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-nodebird\\\\front\\\\components\\\\PostForm.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from 'react-redux'; // import { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    addPostLoading,\n    addPostDone,\n    imagePaths\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  const onChangeText = useCallback(e => {\n    // console.log(\"text : \" + e.target.value);\n    setText(e.target.value);\n  }, [text]);\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images : ', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    console.log(\"imageFormData : \", imageFormData);\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }); // const onSubmitForm = useCallback(() => {\n  //     console.log(\"게시글 추가 submit click !!\");\n  //     console.log(\"text 확인 : \", text);\n  //     dispatch({\n  //         type: ADD_POST_REQUEST,\n  //         data: {\n  //             text,\n  //         },\n  //     });\n  // }, [text]);\n\n  const onSubmitForm = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  return __jsx(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmitForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    htmlType: \"submit\",\n    loading: addPostLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"\\uC9F9\\uC9F9\"), imagePaths.map((v, i) => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    style: {\n      width: '200px'\n    },\n    alt: v,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }, \"\\uC81C\\uAC70\"))))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/react-nodebird/front/components/PostForm.js"],"names":["React","useState","useCallback","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","addPostLoading","addPostDone","imagePaths","state","post","onChangeText","e","target","value","imageInput","onClickImageUpload","current","click","onChangeImages","console","log","files","imageFormData","FormData","forEach","call","f","append","type","data","onSubmitForm","trim","alert","formData","p","margin","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n// import { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\n\r\n\r\nconst PostForm = () => {\r\n    const dispatch = useDispatch();\r\n    const [text, setText] = useState('');\r\n    const { addPostLoading, addPostDone, imagePaths } = useSelector((state) => state.post);\r\n\r\n    useEffect(() => {\r\n        if (addPostDone) {\r\n            setText('');\r\n        }\r\n    }, [addPostDone]);\r\n\r\n    const onChangeText = useCallback((e) => {\r\n        // console.log(\"text : \" + e.target.value);\r\n        setText(e.target.value);\r\n    }, [text]);\r\n\r\n    const imageInput = useRef();\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n\r\n    const onChangeImages = useCallback((e) => {\r\n        console.log('images : ', e.target.files);\r\n        const imageFormData = new FormData();\r\n        [].forEach.call(e.target.files, (f) => {\r\n            imageFormData.append('image', f);\r\n        });\r\n        console.log(\"imageFormData : \", imageFormData);\r\n\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData,\r\n        });\r\n\r\n    });\r\n\r\n    // const onSubmitForm = useCallback(() => {\r\n    //     console.log(\"게시글 추가 submit click !!\");\r\n    //     console.log(\"text 확인 : \", text);\r\n    //     dispatch({\r\n    //         type: ADD_POST_REQUEST,\r\n    //         data: {\r\n    //             text,\r\n    //         },\r\n    //     });\r\n    // }, [text]);\r\n\r\n    const onSubmitForm = useCallback(() => {\r\n        if (!text || !text.trim()) {\r\n            return alert('게시글을 작성하세요.');\r\n        }\r\n        const formData = new FormData();\r\n        imagePaths.forEach((p) => {\r\n            formData.append('image', p);\r\n        });\r\n        formData.append('content', text);\r\n        return dispatch({\r\n            type: ADD_POST_REQUEST,\r\n            data: formData,\r\n        });\r\n    }, [text, imagePaths]);\r\n\r\n\r\n    return (\r\n        <Form\r\n            style={{ margin: \"10px 0 20px\" }}\r\n            encType=\"multipart/form-data\"\r\n            onFinish={onSubmitForm}\r\n        >\r\n            <Input.TextArea\r\n                value={text}\r\n                onChange={onChangeText}\r\n                maxLength={140}\r\n                placeholder=\"어떤 신기한 일이 있었나요?\"\r\n            />\r\n            <div>\r\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n\r\n                <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={addPostLoading}>짹짹</Button>\r\n\r\n                {imagePaths.map((v, i) => (\r\n                    <div key={v} style={{ display: 'inline-block' }}>\r\n                        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n                        <div>\r\n                            <Button >제거</Button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n\r\n            </div>\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}